diff -Nur u-boot-2011.06//arch/arm/config.mk u-boot-2011.06-tekkaman//arch/arm/config.mk
--- u-boot-2011.06//arch/arm/config.mk	2011-06-28 04:22:42.000000000 +0800
+++ u-boot-2011.06-tekkaman//arch/arm/config.mk	2012-12-17 15:15:02.000000000 +0800
@@ -71,5 +71,7 @@
 
 # needed for relocation
 ifndef CONFIG_NAND_SPL
+ifndef CONFIG_MMC_SPL
 LDFLAGS_u-boot += -pie
 endif
+endif
diff -Nur u-boot-2011.06//arch/arm/cpu/arm1176/s3c64xx/cpu_init.S u-boot-2011.06-tekkaman//arch/arm/cpu/arm1176/s3c64xx/cpu_init.S
--- u-boot-2011.06//arch/arm/cpu/arm1176/s3c64xx/cpu_init.S	2011-06-28 04:22:42.000000000 +0800
+++ u-boot-2011.06-tekkaman//arch/arm/cpu/arm1176/s3c64xx/cpu_init.S	2012-12-17 15:15:02.000000000 +0800
@@ -130,6 +130,95 @@
 	bne	check_dmc1_ready
 	nop
 
+#ifdef CONFIG_MEM_AUTO_ADAPT_MINI6410
+	ldr	r1, =CONFIG_MEM_TESTWORD1_MINI6410
+	ldr	r3, =CONFIG_MEM_TESTPOINT_MIRROR_MINI6410
+	ldr	r4, =CONFIG_MEM_TESTPOINT_MINI6410
+	str	r1, [r3]
+	ldr	r2, [r4]
+	cmp	r1, r2
+	bne	mem_ctrl_asm_init_end
+
+	ldr	r1, =CONFIG_MEM_TESTWORD2_MINI6410
+	str	r1, [r4]
+	ldr	r2, [r3]
+	cmp	r1, r2
+	bne	mem_ctrl_asm_init_end
+
+	ldr	r1, =0x3
+	str	r1, [r0, #INDEX_DMC_MEMC_CMD]
+
+check_dmc1_pause:
+	ldr	r1, [r0, #INDEX_DMC_MEMC_STATUS]
+	mov	r2, #0x3
+	and	r1, r1, r2
+	cmp	r1, #0x2
+	bne	check_dmc1_pause
+	nop
+
+	ldr	r1, =0x4
+	str	r1, [r0, #INDEX_DMC_MEMC_CMD]
+
+check_dmc1_config:
+	ldr	r1, [r0, #INDEX_DMC_MEMC_STATUS]
+	mov	r2, #0x3
+	and	r1, r1, r2
+	cmp	r1, #0x0
+	bne	check_dmc1_config
+	nop
+
+	ldr	r1, =DMC1_MEM_CFG_128MB
+	str	r1, [r0, #INDEX_DMC_MEMORY_CFG]
+
+	ldr	r1, =DMC1_CHIP0_CFG_128MB
+	str	r1, [r0, #INDEX_DMC_CHIP_0_CFG]
+	nop
+
+	/* Enable DMC1 */
+	mov	r1, #0x0
+	str	r1, [r0, #INDEX_DMC_MEMC_CMD]
+
+check_dmc1_ready_128m:
+	ldr	r1, [r0, #INDEX_DMC_MEMC_STATUS]
+	mov	r2, #0x3
+	and	r1, r1, r2
+	cmp	r1, #0x1
+	bne	check_dmc1_ready_128m
+	nop
+
+mem_ctrl_asm_init_end:
+#endif
+
+#if defined(CONFIG_MINI6410) && defined(CONFIG_DRIVER_DM9000)
+/* ------------------------------------------------------------------------- */
+#define SROM_BC1_REG_Tacs     (0x0)   // 0clk         address set-up
+#define SROM_BC1_REG_Tcos     (0x4)   // 4clk         chip selection set-up
+#define SROM_BC1_REG_Tacc     (0xE)   // 14clk        access cycle
+#define SROM_BC1_REG_Tcoh     (0x1)   // 1clk         chip selection hold
+#define SROM_BC1_REG_Tah      (0x4)   // 4clk         address holding time
+#define SROM_BC1_REG_Tacp     (0x6)   // 6clk         page mode access cycle
+#define SROM_BC1_REG_PMC      (0x0)   // normal(1data)page mode configuration
+
+#define SROM_BW_REG_DATA	((1<<7) | (1<<6) | (1<<4))
+#define SROM_BW_REG_BC1		(0xf << 4)
+#define SROM_BC1_REG_DATA	((SROM_BC1_REG_Tacs << 28) | (SROM_BC1_REG_Tcos << 24) | \
+				(SROM_BC1_REG_Tacc << 16) | (SROM_BC1_REG_Tcoh << 12) | \
+				(SROM_BC1_REG_Tah << 8) | (SROM_BC1_REG_Tacp << 4) | \
+				(SROM_BC1_REG_PMC))
+
+	ldr	r0, =ELFIN_SROM_BASE
+
+	ldr	r1, [r0, #SROM_BW_REG_DATA]
+	mov	r2, #(~SROM_BW_REG_BC1)
+	and	r1, r1, r2
+	mov	r2, #SROM_BW_REG_DATA
+	orr	r1, r1, r2	
+	str	r1, [r0, #INDEX_SROM_BW_REG]
+
+	ldr	r1, =SROM_BC1_REG_DATA
+	str	r1, [r0, #INDEX_SROM_BC1_REG]
+#endif
+
 	mov	pc, lr
 
 	.ltorg
diff -Nur u-boot-2011.06//arch/arm/cpu/arm1176/s3c64xx/Makefile u-boot-2011.06-tekkaman//arch/arm/cpu/arm1176/s3c64xx/Makefile
--- u-boot-2011.06//arch/arm/cpu/arm1176/s3c64xx/Makefile	2011-06-28 04:22:42.000000000 +0800
+++ u-boot-2011.06-tekkaman//arch/arm/cpu/arm1176/s3c64xx/Makefile	2012-12-17 15:15:02.000000000 +0800
@@ -30,7 +30,7 @@
 
 SOBJS	= reset.o
 
-COBJS-$(CONFIG_S3C6400)	+= cpu_init.o speed.o
+COBJS-$(CONFIG_S3C64XX)	+= cpu_init.o speed.o
 COBJS-y	+= timer.o
 
 OBJS	:= $(addprefix $(obj),$(SOBJS) $(COBJS-y))
diff -Nur u-boot-2011.06//arch/arm/cpu/arm1176/s3c64xx/timer.c u-boot-2011.06-tekkaman//arch/arm/cpu/arm1176/s3c64xx/timer.c
--- u-boot-2011.06//arch/arm/cpu/arm1176/s3c64xx/timer.c	2011-06-28 04:22:42.000000000 +0800
+++ u-boot-2011.06-tekkaman//arch/arm/cpu/arm1176/s3c64xx/timer.c	2012-12-17 15:15:02.000000000 +0800
@@ -43,7 +43,7 @@
 #include <asm/arch/s3c6400.h>
 #include <div64.h>
 
-static ulong timer_load_val;
+DECLARE_GLOBAL_DATA_PTR;
 
 #define PRESCALER	167
 
@@ -60,12 +60,6 @@
 	return timers->TCNTO4;
 }
 
-/* Internal tick units */
-/* Last decremneter snapshot */
-static unsigned long lastdec;
-/* Monotonic incrementing timer */
-static unsigned long long timestamp;
-
 int timer_init(void)
 {
 	s3c64xx_timers *const timers = s3c64xx_get_base_timers();
@@ -83,20 +77,18 @@
 	 * the prescaler automatically for other PCLK frequencies.
 	 */
 	timers->TCFG0 = PRESCALER << 8;
-	if (timer_load_val == 0) {
-		timer_load_val = get_PCLK() / PRESCALER * (100 / 4); /* 100s */
-		timers->TCFG1 = (timers->TCFG1 & ~0xf0000) | 0x20000;
-	}
+	gd->timer_rate_hz = get_PCLK() / PRESCALER * (100 / 4); /* 100s */
+	timers->TCFG1 = (timers->TCFG1 & ~0xf0000) | 0x20000;
 
 	/* load value for 10 ms timeout */
-	lastdec = timers->TCNTB4 = timer_load_val;
+	gd->lastinc = timers->TCNTB4 = gd->timer_rate_hz;
 	/* auto load, manual update of Timer 4 */
 	timers->TCON = (timers->TCON & ~0x00700000) | TCON_4_AUTO |
 		TCON_4_UPDATE;
 
 	/* auto load, start Timer 4 */
 	timers->TCON = (timers->TCON & ~0x00700000) | TCON_4_AUTO | COUNT_4_ON;
-	timestamp = 0;
+	gd->timer_reset_value = 0;
 
 	return 0;
 }
@@ -113,16 +105,16 @@
 {
 	ulong now = read_timer();
 
-	if (lastdec >= now) {
+	if (gd->lastinc >= now) {
 		/* normal mode */
-		timestamp += lastdec - now;
+		gd->timer_reset_value += gd->lastinc - now;
 	} else {
 		/* we have an overflow ... */
-		timestamp += lastdec + timer_load_val - now;
+		gd->timer_reset_value += gd->lastinc + gd->timer_rate_hz - now;
 	}
-	lastdec = now;
+	gd->lastinc = now;
 
-	return timestamp;
+	return gd->timer_reset_value;
 }
 
 /*
@@ -132,14 +124,14 @@
 ulong get_tbclk(void)
 {
 	/* We overrun in 100s */
-	return (ulong)(timer_load_val / 100);
+	return (ulong)(gd->timer_rate_hz / 100);
 }
 
 void reset_timer_masked(void)
 {
 	/* reset time */
-	lastdec = read_timer();
-	timestamp = 0;
+	gd->lastinc = read_timer();
+	gd->timer_reset_value = 0;
 }
 
 void reset_timer(void)
@@ -150,7 +142,7 @@
 ulong get_timer_masked(void)
 {
 	unsigned long long res = get_ticks();
-	do_div (res, (timer_load_val / (100 * CONFIG_SYS_HZ)));
+	do_div(res, (gd->timer_rate_hz / (100 * CONFIG_SYS_HZ)));
 	return res;
 }
 
@@ -161,7 +153,7 @@
 
 void set_timer(ulong t)
 {
-	timestamp = t * (timer_load_val / (100 * CONFIG_SYS_HZ));
+	gd->timer_reset_value = t * (gd->timer_rate_hz / (100 * CONFIG_SYS_HZ));
 }
 
 void __udelay(unsigned long usec)
@@ -170,7 +162,7 @@
 	ulong tmo;
 
 	tmo = (usec + 9) / 10;
-	tmp = get_ticks() + tmo;	/* get current timestamp */
+	tmp = get_ticks() + tmo;	/* get current timer_reset_value */
 
 	while (get_ticks() < tmp)/* loop till event */
 		 /*NOP*/;
diff -Nur u-boot-2011.06//arch/arm/cpu/arm1176/start.S u-boot-2011.06-tekkaman//arch/arm/cpu/arm1176/start.S
--- u-boot-2011.06//arch/arm/cpu/arm1176/start.S	2011-06-28 04:22:42.000000000 +0800
+++ u-boot-2011.06-tekkaman//arch/arm/cpu/arm1176/start.S	2012-12-17 15:15:02.000000000 +0800
@@ -41,6 +41,14 @@
 #define CONFIG_SYS_PHY_UBOOT_BASE	CONFIG_SYS_UBOOT_BASE
 #endif
 
+#if defined(CONFIG_MINI6410_LED)
+#define ELFIN_GPIO_BASE_8BIT		0x7f000000
+#define ELFIN_GPK_BASE_8BIT		0x8800
+#define GPKCON0_OFFSET_8BIT		0x00
+#define GPKCON1_OFFSET_8BIT		0x04
+#define GPKDAT_OFFSET_8BIT		0x08
+#define GPKPUD_OFFSET_8BIT		0x0C
+#endif
 /*
  *************************************************************************
  *
@@ -51,7 +59,7 @@
 
 .globl _start
 _start: b	reset
-#ifndef CONFIG_NAND_SPL
+#if !(defined(CONFIG_NAND_SPL) || defined(CONFIG_MMC_SPL))
 	ldr	pc, _undefined_instruction
 	ldr	pc, _software_interrupt
 	ldr	pc, _prefetch_abort
@@ -164,7 +172,7 @@
 	 * When booting from NAND - it has definitely been a reset, so, no need
 	 * to flush caches and disable the MMU
 	 */
-#ifndef CONFIG_NAND_SPL
+#if !(defined(CONFIG_NAND_SPL) || defined(CONFIG_MMC_SPL))
 	/*
 	 * flush v4 I/D caches
 	 */
@@ -228,9 +236,9 @@
 call_board_init_f:
 	ldr	sp, =(CONFIG_SYS_INIT_SP_ADDR)
 	bic	sp, sp, #7 /* 8-byte alignment for ABI compliance */
+#if !(defined(CONFIG_NAND_SPL) || defined(CONFIG_MMC_SPL))
 	ldr	r0,=0x00000000
 	bl	board_init_f
-
 /*------------------------------------------------------------------------------*/
 
 /*
@@ -245,18 +253,33 @@
 	mov	r4, r0	/* save addr_sp */
 	mov	r5, r1	/* save addr of gd */
 	mov	r6, r2	/* save addr of destination */
-
+	ldr	r9, =0x00000000
 	/* Set up the stack						    */
 stack_setup:
 	mov	sp, r4
 
 	adr	r0, _start
 	cmp	r0, r6
-	beq	clear_bss		/* skip relocation */
+	beq	fixsym		/* skip relocation */
+#if defined(CONFIG_MINI6410_LED)
+/* if relocate the u-boot code, LED2 will on.*/
+	mov	r1, #ELFIN_GPIO_BASE_8BIT
+	add	r1, r1, #ELFIN_GPK_BASE_8BIT
+/*		SPL will do it!
+	ldr	r2, =0x11111111
+	str	r2, [r1, #GPKCON0_OFFSET_8BIT]
+	ldr	r2, =0x0000AAAA
+	str	r2, [r1, #GPKPUD_OFFSET_8BIT]
+*/
+	ldr	r2, [r1, #GPKDAT_OFFSET_8BIT]
+	and	r2, r2, #0xffffffbf
+	str	r2, [r1, #GPKDAT_OFFSET_8BIT]
+#endif
 	mov	r1, r6			/* r1 <- scratch for copy_loop */
 	ldr	r3, _bss_start_ofs
 	add	r2, r0, r3		/* r2 <- source end address	    */
 
+
 copy_loop:
 	ldmia	r0!, {r9-r10}		/* copy from source address [r0]    */
 	stmia	r1!, {r9-r10}		/* copy to   target address [r1]    */
@@ -267,6 +290,7 @@
 	/*
 	 * fix .rel.dyn relocations
 	 */
+fixsym:
 	ldr	r0, _TEXT_BASE		/* r0 <- Text base */
 	sub	r9, r6, r0		/* r9 <- relocation offset */
 	ldr	r10, _dynsym_start_ofs	/* r10 <- sym table ofs */
@@ -303,6 +327,7 @@
 	cmp	r2, r3
 	blo	fixloop
 #endif
+#endif
 
 #ifdef CONFIG_ENABLE_MMU
 enable_mmu:
@@ -356,7 +381,7 @@
 	cmp	r0, r1
 	bne	clbss_l
 
-#ifndef CONFIG_NAND_SPL
+#if !(defined(CONFIG_NAND_SPL) || defined(CONFIG_MMC_SPL))
 	bl coloured_LED_init
 	bl red_LED_on
 #endif
@@ -366,10 +391,58 @@
  * We are done. Do not return, instead branch to second part of board
  * initialization, now running from RAM.
  */
-#ifdef CONFIG_NAND_SPL
-	ldr     pc, _nand_boot
+#if (defined(CONFIG_NAND_SPL) || defined(CONFIG_MMC_SPL))
+
+#if defined(CONFIG_BOOT_AUTODETECT)
+/*check boot status */
+#define MEM_CFG_STAT 0x7E00F12C
+
+	ldr	r1, =MEM_CFG_STAT		/* address of reg  MEM_CFG_STAT*/
+	ldr	r0, [r1]
+	mov	r1, #0x60
+	and	r1, r0, r1			/*r1 = MEM_CFG_STAT & CFG_BOOT_LOC */
+
+	cmp	r1, #0x60		/*Internal ROM*/
+	beq	boot_from_irom
+	cmp	r1, #0x00		/*Stepping Stone area in NFCON*/
+	beq	boot_from_nand
+	b	reset
+#endif
+
+#if (defined(CONFIG_MMC_SPL) || defined(CONFIG_BOOT_AUTODETECT))
+boot_from_irom:
+/*MINI6410 boot from Internal ROM-->MMC boot*/
+#if defined(CONFIG_MINI6410_LED)
+/* R/W, Pull-up disable register */
+	mov	r1, #ELFIN_GPIO_BASE_8BIT
+	add	r1, r1, #ELFIN_GPK_BASE_8BIT
+	ldr	r2, =0x11111111
+	str	r2, [r1, #GPKCON0_OFFSET_8BIT]
+	ldr	r2, =0x0000AAAA
+	str	r2, [r1, #GPKPUD_OFFSET_8BIT]
+	ldr	r2, =0x0000ff7f
+	str	r2, [r1, #GPKDAT_OFFSET_8BIT]
+#endif
+	b	mmc_boot_copy
+#endif
+
+#if (defined(CONFIG_NAND_SPL) || defined(CONFIG_BOOT_AUTODETECT))
+boot_from_nand:
+/*MINI6410 boot from Nand Flash*/
+#if defined(CONFIG_MINI6410_LED)
+/* R/W, Pull-up disable register */
+	mov	r1, #ELFIN_GPIO_BASE_8BIT
+	add	r1, r1, #ELFIN_GPK_BASE_8BIT
+	ldr	r2, =0x11111111
+	str	r2, [r1, #GPKCON0_OFFSET_8BIT]
+	ldr	r2, =0x0000AAAA
+	str	r2, [r1, #GPKPUD_OFFSET_8BIT]
+	ldr	r2, =0x0000ffff
+	str	r2, [r1, #GPKDAT_OFFSET_8BIT]
+#endif
+	b	nand_boot
+#endif
 
-_nand_boot: .word nand_boot
 #else
 	ldr	r0, _board_init_r_ofs
 	adr	r1, _start
@@ -383,7 +456,6 @@
 
 _board_init_r_ofs:
 	.word board_init_r - _start
-#endif
 
 _rel_dyn_start_ofs:
 	.word __rel_dyn_start - _start
@@ -391,13 +463,14 @@
 	.word __rel_dyn_end - _start
 _dynsym_start_ofs:
 	.word __dynsym_start - _start
+#endif
 
 #ifdef CONFIG_ENABLE_MMU
 _mmu_table_base:
 	.word mmu_table
 #endif
 
-#ifndef CONFIG_NAND_SPL
+#if !(defined(CONFIG_NAND_SPL) || defined(CONFIG_MMC_SPL))
 /*
  * we assume that cache operation is done before. (eg. cleanup_before_linux())
  * actually, we don't need to do anything about cache if not use d-cache in
@@ -575,4 +648,4 @@
 	get_bad_stack
 	bad_save_user_regs
 	bl	do_fiq
-#endif /* CONFIG_NAND_SPL */
+#endif /* CONFIG_NAND_SPL || CONFIG_MMC_SPL */
diff -Nur u-boot-2011.06//arch/arm/include/asm/arch-s3c64xx/s3c6400.h u-boot-2011.06-tekkaman//arch/arm/include/asm/arch-s3c64xx/s3c6400.h
--- u-boot-2011.06//arch/arm/include/asm/arch-s3c64xx/s3c6400.h	2011-06-28 04:22:42.000000000 +0800
+++ u-boot-2011.06-tekkaman//arch/arm/include/asm/arch-s3c64xx/s3c6400.h	2012-12-17 15:15:02.000000000 +0800
@@ -381,6 +381,8 @@
 #define S3C64XX_MEM_SYS_CFG_NAND	0x0008
 #define S3C64XX_MEM_SYS_CFG_ONENAND	S3C64XX_MEM_SYS_CFG_16BIT
 
+#if 0			//masking it for "typedef struct {.....} s3c64xx_gpio;"  tekkamanninja
+
 #define GPACON		(ELFIN_GPIO_BASE + GPACON_OFFSET)
 #define GPADAT		(ELFIN_GPIO_BASE + GPADAT_OFFSET)
 #define GPAPUD		(ELFIN_GPIO_BASE + GPAPUD_OFFSET)
@@ -461,7 +463,7 @@
 #define GPQPUD		(ELFIN_GPIO_BASE + GPQPUD_OFFSET)
 #define GPQCONSLP	(ELFIN_GPIO_BASE + GPQCONSLP_OFFSET)
 #define GPQPUDSLP	(ELFIN_GPIO_BASE + GPQPUDSLP_OFFSET)
-
+#endif
 /*
  * Memory controller
  */
@@ -475,6 +477,15 @@
 #define SROM_BC4_REG	__REG(ELFIN_SROM_BASE + 0x14)
 #define SROM_BC5_REG	__REG(ELFIN_SROM_BASE + 0x18)
 
+#define INDEX_SROM_BW_REG	0x0
+#define INDEX_SROM_BC0_REG	0x4
+#define INDEX_SROM_BC1_REG	0x8
+#define INDEX_SROM_BC2_REG	0xC
+#define INDEX_SROM_BC3_REG	0x10
+#define INDEX_SROM_BC4_REG	0x14
+#define INDEX_SROM_BC5_REG	0x18
+
+
 /*
  * SDRAM Controller
  */
@@ -817,9 +828,11 @@
 /*-----------------------------------------------------------------------
  * Physical Memory Map
  */
-#define DMC1_MEM_CFG	0x00010012	/* burst 4, 13-bit row, 10-bit col */
+#define DMC1_MEM_CFG	0x0001001a	/* burst 4, 14-bit row, 10-bit col */
+#define DMC1_MEM_CFG_128MB	0x00010012	/* burst 4, 13-bit row, 10-bit col */
 #define DMC1_MEM_CFG2	0xB45
-#define DMC1_CHIP0_CFG	0x150F8		/* 0x5000_0000~0x57ff_ffff (128 MiB) */
+#define DMC1_CHIP0_CFG	0x150F0		/* 0x5000_0000~0x5fff_ffff (256 MiB) */
+#define DMC1_CHIP0_CFG_128MB	0x150F8		/* 0x5000_0000~0x57ff_ffff (128 MiB) */
 #define DMC_DDR_32_CFG	0x0 		/* 32bit, DDR */
 
 /* Memory Parameters */
@@ -877,6 +890,25 @@
 /* 2b01 : mDDR */
 #define DMC_DDR_USER_CONFIG	1
 
+/*
+ *  display controller
+ */
+#define ELFIN_FB_BASE		0x77100000
+
+
+#define LCD_SEL			0
+#define LCD_SEL_MASK		0x03
+
+
+#define ELFIN_MODEM_BASE	0x74108000
+#define INT2M_LEVEL		4
+#define SEL_BYPASS		3
+#define SEL_RS			0
+
+#define ELFIN_MSBM_BASE		0x74100000
+
+#define ELFIN_MMC_BASE		0x7C200000
+
 #ifndef __ASSEMBLY__
 enum s3c64xx_uarts_nr {
 	S3C64XX_UART0,
@@ -890,6 +922,30 @@
 {
 	return (s3c64xx_uart *)(ELFIN_UART_BASE + (nr * 0x400));
 }
+
+static inline s3c64xx_fb *s3c64xx_get_base_fb(void)
+{
+	return (s3c64xx_fb *)(ELFIN_FB_BASE);
+}
+static inline s3c64xx_gpio *s3c64xx_get_base_gpio(void)
+{
+	return (s3c64xx_gpio *)(ELFIN_GPIO_BASE);
+}
+
+static inline s3c64xx_modem *s3c64xx_get_base_modem(void)
+{
+	return (s3c64xx_modem *)(ELFIN_MODEM_BASE);
+}
+
+static inline void *s3c64xx_get_base_modembuffer(void)
+{
+	return (void *)(ELFIN_MSBM_BASE);
+}
+
+static inline void *samsung_get_base_mmc(void)
+{
+	return (void *)(ELFIN_MMC_BASE);
+}
 #endif
 
 #endif /*__S3C6400_H__*/
diff -Nur u-boot-2011.06//arch/arm/include/asm/arch-s3c64xx/s3c64x0.h u-boot-2011.06-tekkaman//arch/arm/include/asm/arch-s3c64xx/s3c64x0.h
--- u-boot-2011.06//arch/arm/include/asm/arch-s3c64xx/s3c64x0.h	2011-06-28 04:22:42.000000000 +0800
+++ u-boot-2011.06-tekkaman//arch/arm/include/asm/arch-s3c64xx/s3c64x0.h	2012-12-17 15:15:02.000000000 +0800
@@ -34,7 +34,7 @@
 #ifndef __S3C64XX_H__
 #define __S3C64XX_H__
 
-#if defined(CONFIG_SYNC_MODE) && defined(CONFIG_S3C6400)
+#if defined(CONFIG_SYNC_MODE) && (defined(CONFIG_S3C6400) || defined(CONFIG_S3C6410))
 #error CONFIG_SYNC_MODE unavailable on S3C6400, please, fix your configuration!
 #endif
 
@@ -87,4 +87,352 @@
 	volatile u32	TCNTO4;
 } s3c64xx_timers;
 
+typedef struct {
+	volatile u32	VIDCON0;
+	volatile u32	VIDCON1;
+	volatile u32	VIDCON2;
+	volatile u8	res1[4];
+
+	volatile u32	VIDTCON0;
+	volatile u32	VIDTCON1;
+	volatile u32	VIDTCON2;
+	volatile u8	res2[4];
+
+	volatile u32	WINCON0;
+	volatile u32	WINCON1;
+	volatile u32	WINCON2;
+	volatile u32	WINCON3;
+	volatile u32	WINCON4;
+	volatile u8	res3[12];
+
+	volatile u32	VIDOSD0A;
+	volatile u32	VIDOSD0B;
+	volatile u32	VIDOSD0C;
+	volatile u8	res4[4];
+
+	volatile u32	VIDOSD1A;
+	volatile u32	VIDOSD1B;
+	volatile u32	VIDOSD1C;
+	volatile u32	VIDOSD1D;
+
+	volatile u32	VIDOSD2A;
+	volatile u32	VIDOSD2B;
+	volatile u32	VIDOSD2C;
+	volatile u32	VIDOSD2D;
+
+	volatile u32	VIDOSD3A;
+	volatile u32	VIDOSD3B;
+	volatile u32	VIDOSD3C;
+	volatile u8	res5[4];
+
+	volatile u32	VIDOSD4A;
+	volatile u32	VIDOSD4B;
+	volatile u32	VIDOSD4C;
+	volatile u8	res6[20];
+
+	volatile u32	VIDW00ADD0B0;
+	volatile u32	VIDW00ADD0B1;
+
+	volatile u32	VIDW01ADD0B0;
+	volatile u32	VIDW01ADD0B1;
+
+	volatile u32	VIDW02ADD0;
+	volatile u8	res7[4];
+	volatile u32	VIDW03ADD0;
+	volatile u8	res8[4];
+	volatile u32	VIDW04ADD0;
+	volatile u8	res9[12];
+
+	volatile u32	VIDW00ADD1B0;
+	volatile u32	VIDW00ADD1B1;
+
+	volatile u32	VIDW01ADD1B0;
+	volatile u32	VIDW01ADD1B1;
+
+	volatile u32	VIDW02ADD1;
+	volatile u8	res10[4];
+	volatile u32	VIDW03ADD1;
+	volatile u8	res11[4];
+	volatile u32	VIDW04ADD1;
+	volatile u8	res12[12];
+
+	volatile u32	VIDW00ADD2;
+	volatile u32	VIDW01ADD2;
+	volatile u32	VIDW02ADD2;
+	volatile u32	VIDW03ADD2;
+	volatile u32	VIDW04ADD2;
+	volatile u8	res13[28];
+
+	volatile u32	VIDINTCON0;
+	volatile u32	VIDINTCON1;
+	volatile u8	res14[8];
+
+	volatile u32	W1KEYCON0;
+	volatile u32	W1KEYCON1;
+
+	volatile u32	W2KEYCON0;
+	volatile u32	W2KEYCON1;
+
+	volatile u32	W3KEYCON0;
+	volatile u32	W3KEYCON1;
+
+	volatile u32	W4KEYCON0;
+	volatile u32	W4KEYCON1;
+	volatile u8	res15[16];
+
+	volatile u32	DITHMODE;
+	volatile u8	res16[12];
+
+	volatile u32	WIN0MAP;
+	volatile u32	WIN1MAP;
+	volatile u32	WIN2MAP;
+	volatile u32	WIN3MAP;
+	volatile u32	WIN4MAP;
+	volatile u8	res17[12];
+
+	volatile u32	WPALCON;
+	volatile u32	TRIGCON;
+	volatile u32	ITUIFCON0;
+	volatile u8	res18[4];
+
+	volatile u32	I80IFCONA0;
+	volatile u32	I80IFCONA1;
+	volatile u32	I80IFCONB0;
+	volatile u32	I80IFCONB1;
+	volatile u8	res19[16];
+
+	volatile u32	LDI_CMDCON0;
+	volatile u32	LDI_CMDCON1;
+	volatile u8	res20[8];
+
+	volatile u32	SIFCCON0;
+	volatile u32	SIFCCON1;
+	volatile u32	SIFCCON2;
+	volatile u8	res21[148];
+
+	volatile u32	LDI_CMD0;
+	volatile u32	LDI_CMD1;
+	volatile u32	LDI_CMD2;
+	volatile u32	LDI_CMD3;
+	volatile u32	LDI_CMD4;
+	volatile u32	LDI_CMD5;
+	volatile u32	LDI_CMD6;
+	volatile u32	LDI_CMD7;
+	volatile u32	LDI_CMD8;
+	volatile u32	LDI_CMD9;
+	volatile u32	LDI_CMD10;
+	volatile u32	LDI_CMD11;
+	volatile u8	res22[80];
+
+	volatile u32	W2PDATA01;
+	volatile u32	W2PDATA23;
+	volatile u32	W2PDATA45;
+	volatile u32	W2PDATA67;
+	volatile u32	W2PDATA89;
+	volatile u32	W2PDATAAB;
+	volatile u32	W2PDATACD;
+	volatile u32	W2PDATAEF;
+
+	volatile u32	W3PDATA01;
+	volatile u32	W3PDATA23;
+	volatile u32	W3PDATA45;
+	volatile u32	W3PDATA67;
+	volatile u32	W3PDATA89;
+	volatile u32	W3PDATAAB;
+	volatile u32	W3PDATACD;
+	volatile u32	W3PDATAEF;
+
+	volatile u32	W4PDATA01;
+	volatile u32	W4PDATA23;
+} s3c64xx_fb;
+
+typedef struct {
+	volatile u32	GPACON;
+	volatile u32	GPADAT;
+	volatile u32	GPAPUD;
+	volatile u32	GPACONSLP;
+	volatile u32	GPAPUDSLP;
+	volatile u8	res1[12];
+
+	volatile u32	GPBCON;
+	volatile u32	GPBDAT;
+	volatile u32	GPBPUD;
+	volatile u32	GPBCONSLP;
+	volatile u32	GPBPUDSLP;
+	volatile u8	res2[12];
+
+	volatile u32	GPCCON;
+	volatile u32	GPCDAT;
+	volatile u32	GPCPUD;
+	volatile u32	GPCCONSLP;
+	volatile u32	GPCPUDSLP;
+	volatile u8	res3[12];
+
+	volatile u32	GPDCON;
+	volatile u32	GPDDAT;
+	volatile u32	GPDPUD;
+	volatile u32	GPDCONSLP;
+	volatile u32	GPDPUDSLP;
+	volatile u8	res4[12];
+
+	volatile u32	GPECON;
+	volatile u32	GPEDAT;
+	volatile u32	GPEPUD;
+	volatile u32	GPECONSLP;
+	volatile u32	GPEPUDSLP;
+	volatile u8	res5[12];
+
+	volatile u32	GPFCON;
+	volatile u32	GPFDAT;
+	volatile u32	GPFPUD;
+	volatile u32	GPFCONSLP;
+	volatile u32	GPFPUDSLP;
+	volatile u8	res6[12];
+
+	volatile u32	GPGCON;
+	volatile u32	GPGDAT;
+	volatile u32	GPGPUD;
+	volatile u32	GPGCONSLP;
+	volatile u32	GPGPUDSLP;
+	volatile u8	res7[12];
+
+	volatile u32	GPHCON0;
+	volatile u32	GPHCON1;
+	volatile u32	GPHDAT;
+	volatile u32	GPHPUD;
+	volatile u32	GPHCONSLP;
+	volatile u32	GPHPUDSLP;
+	volatile u8	res8[8];
+
+	volatile u32	GPICON;
+	volatile u32	GPIDAT;
+	volatile u32	GPIPUD;
+	volatile u32	GPICONSLP;
+	volatile u32	GPIPUDSLP;
+	volatile u8	res9[12];
+
+	volatile u32	GPJCON;
+	volatile u32	GPJDAT;
+	volatile u32	GPJPUD;
+	volatile u32	GPJCONSLP;
+	volatile u32	GPJPUDSLP;
+	volatile u8	res10[12];
+
+	volatile u32	GPOCON;
+	volatile u32	GPODAT;
+	volatile u32	GPOPUD;
+	volatile u32	GPOCONSLP;
+	volatile u32	GPOPUDSLP;
+	volatile u8	res11[12];
+
+	volatile u32	GPPCON;
+	volatile u32	GPPDAT;
+	volatile u32	GPPPUD;
+	volatile u32	GPPCONSLP;
+	volatile u32	GPPPUDSLP;
+	volatile u8	res12[12];
+
+	volatile u32	GPQCON;
+	volatile u32	GPQDAT;
+	volatile u32	GPQPUD;
+	volatile u32	GPQCONSLP;
+	volatile u32	GPQPUDSLP;
+	volatile u8	res13[12];
+
+	volatile u32	SPCON;
+	volatile u8	res14[28];
+
+	volatile u32	MEM0CONSLP0;
+	volatile u32	MEM0CONSLP1;
+	volatile u32	MEM1CONSLP;
+	volatile u8	res15[4];
+
+	volatile u32	MEM0DRVCON;
+	volatile u32	MEM1DRVCON;
+	volatile u8	res16[40];
+
+	volatile u32	EINT12CON;
+	volatile u32	EINT34CON;
+	volatile u32	EINT56CON;
+	volatile u32	EINT78CON;
+	volatile u32	EINT9CON;
+	volatile u8	res17[12];
+
+	volatile u32	EINT12FLTCON;
+	volatile u32	EINT34FLTCON;
+	volatile u32	EINT56FLTCON;
+	volatile u32	EINT78FLTCON;
+	volatile u32	EINT9FLTCON;
+	volatile u8	res18[12];
+
+	volatile u32	EINT12MASK;
+	volatile u32	EINT34MASK;
+	volatile u32	EINT56MASK;
+	volatile u32	EINT78MASK;
+	volatile u32	EINT9MASK;
+	volatile u8	res19[12];
+
+	volatile u32	EINT12PEND;
+	volatile u32	EINT34PEND;
+	volatile u32	EINT56PEND;
+	volatile u32	EINT78PEND;
+	volatile u32	EINT9PEND;
+	volatile u8	res20[12];
+
+	volatile u32	PRIORITY;
+	volatile u32	SERVICE;
+	volatile u32	SERVICEPEND;
+	volatile u8	res21[1396];
+
+	volatile u32	GPKCON0;
+	volatile u32	GPKCON1;
+	volatile u32	GPKDAT;
+	volatile u32	GPKPUD;
+
+	volatile u32	GPLCON0;
+	volatile u32	GPLCON1;
+	volatile u32	GPLDAT;
+	volatile u32	GPLPUD;
+
+	volatile u32	GPMCON;
+	volatile u32	GPMDAT;
+	volatile u32	GPMPUD;
+	volatile u8	res22[4];
+
+	volatile u32	GPNCON;
+	volatile u32	GPNDAT;
+	volatile u32	GPNPUD;
+	volatile u8	res23[68];
+
+	volatile u32	SPCONSLP;
+	volatile u8	res24[124];
+
+	volatile u32	EINT0CON0;
+	volatile u32	EINT0CON1;
+	volatile u8	res25[8];
+
+	volatile u32	EINT0FLTCON0;
+	volatile u32	EINT0FLTCON1;
+	volatile u32	EINT0FLTCON2;
+	volatile u32	EINT0FLTCON3;
+
+	volatile u32	EINT0MASK;
+	volatile u32	EINT0PEND;
+	volatile u8	res26[8];
+
+	volatile u32	SLPEN;
+
+} s3c64xx_gpio;
+
+typedef struct {
+	volatile u32	INT2AP;
+	volatile u32	INT2MODEM;
+	volatile u32	MIFCON;
+	volatile u32	MIFPCON;
+	volatile u32	MODEMINTCLR;
+} s3c64xx_modem;
+
+
+
+
 #endif /*__S3C64XX_H__*/
diff -Nur u-boot-2011.06//arch/arm/lib/board.c u-boot-2011.06-tekkaman//arch/arm/lib/board.c
--- u-boot-2011.06//arch/arm/lib/board.c	2011-06-28 04:22:42.000000000 +0800
+++ u-boot-2011.06-tekkaman//arch/arm/lib/board.c	2012-12-17 15:15:02.000000000 +0800
@@ -60,6 +60,9 @@
 #ifdef CONFIG_DRIVER_LAN91C96
 #include "../drivers/net/lan91c96.h"
 #endif
+#if defined(CONFIG_MINI6410_LED)
+#include <asm/arch/s3c6400.h>
+#endif
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -271,7 +274,9 @@
 	init_fnc_t **init_fnc_ptr;
 	gd_t *id;
 	ulong addr, addr_sp;
-
+#if defined(CONFIG_MINI6410_LED)
+	s3c64xx_gpio * const gpio = s3c64xx_get_base_gpio();
+#endif
 	/* Pointer is writable since we allocated a register for it */
 	gd = (gd_t *) ((CONFIG_SYS_INIT_SP_ADDR) & ~0x07);
 	/* compiler optimization barrier needed for GCC >= 3.4 */
@@ -358,8 +363,11 @@
 	addr -= gd->mon_len;
 	addr &= ~(4096 - 1);
 
-	debug ("Reserving %ldk for U-Boot at: %08lx\n", gd->mon_len >> 10, addr);
+#if defined(CONFIG_SKIP_RELOCATE_UBOOT)
+	addr = CONFIG_SYS_PHY_UBOOT_BASE;		//FIXME
+#endif
 
+	debug ("Reserving %ldk for U-Boot at: %08lx\n", gd->mon_len >> 10, addr);
 #ifndef CONFIG_PRELOADER
 	/*
 	 * reserve memory for malloc() arena
@@ -415,10 +423,12 @@
 	gd->reloc_off = addr - _TEXT_BASE;
 	debug ("relocation Offset is: %08lx\n", gd->reloc_off);
 	memcpy (id, (void *)gd, sizeof (gd_t));
-
+#if defined(CONFIG_MINI6410_LED)
+	debug ("relocate_code : text --> 0X%p gd --> 0X%p sp --> 0X%p \n",
+				 (void *)addr, (void *)id, (void *)addr_sp);
+	gpio->GPKDAT &= ~0x20;
+#endif
 	relocate_code (addr_sp, id, addr);
-
-	/* NOTREACHED - relocate_code() does not return */
 }
 
 #if !defined(CONFIG_SYS_NO_FLASH)
@@ -443,7 +453,9 @@
 #if !defined(CONFIG_SYS_NO_FLASH)
 	ulong flash_size;
 #endif
-
+#if defined(CONFIG_MINI6410_LED)
+	s3c64xx_gpio * const gpio = s3c64xx_get_base_gpio();
+#endif
 	gd = id;
 	bd = gd->bd;
 
@@ -622,7 +634,17 @@
 		setenv ("mem", (char *)memsz);
 	}
 #endif
-
+#if defined(CONFIG_MINI6410_LED)
+	debug ("init finish! goto command loop!\n");
+	gpio->GPKDAT &= ~0x10;
+#endif
+	{
+		uchar ramsize[10];
+		sprintf(ramsize, "%dM", (gd->ram_size/1024/1024));
+		if (setenv("ramsize", ramsize) != 0)	{
+			printf("set ramsize error!!\n");
+		}
+	}
 	/* main_loop() can return to retry autoboot, if so just run it again. */
 	for (;;) {
 		main_loop ();
