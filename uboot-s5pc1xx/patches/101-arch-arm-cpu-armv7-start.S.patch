#
# implement SD/MMC BOOT, and NAND BOOT
#
--- u-boot-linaro-stable-2011.10/arch/arm/lib/board.c	2011-10-24 14:31:53.000000000 +0800
+++ u-boot-2011.06-for-tiny210/arch/arm/lib/board.c	2012-04-11 13:45:02.439004024 +0800
@@ -259,6 +259,11 @@
 	NULL,
 };
 
+void board_init_f_nand(ulong bootflag)
+{
+	while(1);
+}
+
 void board_init_f(ulong bootflag)
 {
 	bd_t *bd;
--- u-boot-linaro-stable-2011.10/include/common.h	2011-10-24 14:31:53.000000000 +0800
+++ u-boot-2011.06-for-tiny210/include/common.h	2012-04-11 13:58:52.727004406 +0800
@@ -269,6 +269,9 @@
 
 /* arch/$(ARCH)/lib/board.c */
 void	board_init_f  (ulong) __attribute__ ((noreturn));
+#if defined(CONFIG_TINY210) || defined(CONFIG_MINI210)
+void	board_init_f_nand  (ulong) __attribute__ ((noreturn));
+#endif
 void	board_init_r  (gd_t *, ulong) __attribute__ ((noreturn));
 int	checkboard    (void);
 int	checkflash    (void);
--- u-boot-linaro-stable-2011.10/arch/arm/cpu/armv7/start.S	2011-10-24 14:31:53.000000000 +0800
+++ u-boot-2011.06-for-tiny210/arch/arm/cpu/armv7/start.S	2012-04-11 14:24:11.723005105 +0800
@@ -32,7 +32,9 @@
 #include <asm-offsets.h>
 #include <config.h>
 #include <version.h>
-
+#include <common.h>
+#include <config.h>
+#include <s5pc110.h>
 .globl _start
 _start: b	reset
 	ldr	pc, _undefined_instruction
@@ -176,8 +178,61 @@
 	ldr	sp, =(CONFIG_SYS_INIT_SP_ADDR)
 	bic	sp, sp, #7 /* 8-byte alignment for ABI compliance */
 	ldr	r0,=0x00000000
+#if defined(CONFIG_TINY210) || defined(CONFIG_MINI210)
+	adr	r4, _start
+	ldr	r5,_TEXT_BASE
+	cmp     r5,r4
+	beq	board_init_in_ram
+
+	ldr	r0, =PRO_ID_BASE
+        ldr	r1, [r0,#OMR_OFFSET]
+        bic	r2, r1, #0xffffffc1
+
+	/* NAND BOOT */
+	cmp	r2, #0x0		@ 512B 4-cycle
+	moveq	r3, #BOOT_NAND
+
+	cmp	r2, #0x2		@ 2KB 5-cycle
+	moveq	r3, #BOOT_NAND
+
+	cmp	r2, #0x4		@ 4KB 5-cycle	8-bit ECC
+	moveq	r3, #BOOT_NAND
+
+	cmp	r2, #0x6		@ 4KB 5-cycle	16-bit ECC
+	moveq	r3, #BOOT_NAND
+
+	cmp	r2, #0x8		@ OneNAND Mux
+	moveq	r3, #BOOT_ONENAND
+
+	/* SD/MMC BOOT */
+	cmp     r2, #0xc
+	moveq   r3, #BOOT_MMCSD
+
+	/* NOR BOOT */
+	cmp     r2, #0x14
+	moveq   r3, #BOOT_NOR
+
+	/* Uart BOOTONG failed */
+	cmp     r2, #(0x1<<4)
+	moveq   r3, #BOOT_SEC_DEV
+
+	ldr	r0, =INF_REG_BASE
+	str	r3, [r0, #INF_REG3_OFFSET]
+
+	ldr	r1, [r0, #INF_REG3_OFFSET]
+	cmp	r1, #BOOT_NAND		/* 0x0 => boot device is nand */
+	beq	nand_boot_210
+	cmp     r1, #BOOT_MMCSD
+	beq     mmcsd_boot_210
+
+nand_boot_210:
+	bl     board_init_f_nand
+
+mmcsd_boot_210:
+	bl     board_init_f
+board_init_in_ram:
+#endif
 	bl	board_init_f
-
 /*------------------------------------------------------------------------------*/
 
 /*
