--- u-boot-2010.03//common/cmd_load.c	2010-04-01 05:54:39.000000000 +0800
+++ u-boot-2010.03-24xx//common/cmd_load.c	2012-09-05 15:06:15.694689762 +0800
@@ -34,6 +34,9 @@
 DECLARE_GLOBAL_DATA_PTR;
 
 #if defined(CONFIG_CMD_LOADB)
+#if defined(ENABLE_CMD_LOADB_X)
+static ulong load_serial_xmodem (ulong offset);
+#endif
 static ulong load_serial_ymodem (ulong offset);
 #endif
 
@@ -475,7 +478,19 @@
 		}
 	}
 
+#if defined(ENABLE_CMD_LOADB_X)
+	if (strcmp(argv[0],"loadx")==0) {
+		printf ("## Ready for binary (xmodem) download "
+			"to 0x%08lX at %d bps...\n",
+			offset,
+			load_baudrate);
+
+		addr = load_serial_xmodem (offset);
+
+	} else if (strcmp(argv[0],"loady")==0) {
+#else
 	if (strcmp(argv[0],"loady")==0) {
+#endif
 		printf ("## Ready for binary (ymodem) download "
 			"to 0x%08lX at %d bps...\n",
 			offset,
@@ -963,6 +978,66 @@
 		return (getc());
 	return -1;
 }
+
+#if defined(ENABLE_CMD_LOADB_X)
+static ulong load_serial_xmodem (ulong offset)
+{
+	int size;
+	char buf[32];
+	int err;
+	int res;
+	connection_info_t info;
+	char xmodemBuf[1024];
+	ulong store_addr = ~0;
+	ulong addr = 0;
+
+	size = 0;
+	info.mode = xyzModem_xmodem;
+	res = xyzModem_stream_open (&info, &err);
+	if (!res) {
+
+		while ((res =
+			xyzModem_stream_read (xmodemBuf, 1024, &err)) > 0) {
+			store_addr = addr + offset;
+			size += res;
+			addr += res;
+#ifndef CFG_NO_FLASH
+			if (addr2info (store_addr)) {
+				int rc;
+
+				rc = flash_write ((char *) xmodemBuf,
+				store_addr, res);
+				if (rc != 0) {
+				flash_perror (rc);
+				return (~0);
+				}
+			} else
+#endif
+			{
+				memcpy ((char *) (store_addr), xmodemBuf,
+					res);
+			}
+
+		}
+	} else {
+		printf ("%s\n", xyzModem_error (err));
+	}
+
+	xyzModem_stream_close (&err);
+	xyzModem_stream_terminate (false, &getcxmodem);
+
+
+	flush_cache (offset, size);
+
+	printf ("## Total Size      = 0x%08x = %d Bytes\n", size, size);
+	sprintf (buf, "%X", size);
+	setenv ("filesize", buf);
+
+	return offset;
+}
+#endif
+
+
 static ulong load_serial_ymodem (ulong offset)
 {
 	int size;
@@ -1078,6 +1153,16 @@
 	" with offset 'off' and baudrate 'baud'"
 );
 
+#if defined(ENABLE_CMD_LOADB_X)
+U_BOOT_CMD(
+	loadx, 3, 0,    do_load_serial_bin,
+	"load binary file over serial line (xmodem mode)",
+	"[ off ] [ baud ]\n"
+	"    - load binary file over serial line"
+	" with offset 'off' and baudrate 'baud'"
+);
+#endif
+
 U_BOOT_CMD(
 	loady, 3, 0,	do_load_serial_bin,
 	"load binary file over serial line (ymodem mode)",
--- u-boot-2010.03//common/cmd_mem.c	2010-04-01 05:54:39.000000000 +0800
+++ u-boot-2010.03-24xx//common/cmd_mem.c	2012-09-05 15:06:15.694689762 +0800
@@ -32,6 +32,9 @@
 #ifdef CONFIG_HAS_DATAFLASH
 #include <dataflash.h>
 #endif
+#if defined(CONFIG_CMD_MMC)
+#include <mmc.h>
+#endif
 #include <watchdog.h>
 
 #include <u-boot/md5.h>
@@ -401,6 +404,46 @@
 		}
 		puts ("done\n");
 		return 0;
+	}
+#endif
+
+#if defined(CONFIG_CMD_MMC)
+	if (mmc2info(dest)) {
+		int rc;
+
+		puts ("Copy to MMC... ");
+		switch (rc = mmc_write ((uchar *)addr, dest, count*size)) {
+		case 0:
+			putc ('\n');
+			return 1;
+		case -1:
+			puts ("failed\n");
+			return 1;
+		default:
+			printf ("%s[%d] FIXME: rc=%d\n",__FILE__,__LINE__,rc);
+			return 1;
+		}
+		puts ("done\n");
+		return 0;
+	}
+
+	if (mmc2info(addr)) {
+		int rc;
+
+		puts ("Copy from MMC... ");
+		switch (rc = mmc_read (addr, (uchar *)dest, count*size)) {
+		case 0:
+			putc ('\n');
+			return 1;
+		case -1:
+			puts ("failed\n");
+			return 1;
+		default:
+			printf ("%s[%d] FIXME: rc=%d\n",__FILE__,__LINE__,rc);
+			return 1;
+		}
+		puts ("done\n");
+		return 0;
 	}
 #endif
 
--- u-boot-2010.03//common/cmd_mmc.c	2010-04-01 05:54:39.000000000 +0800
+++ u-boot-2010.03-24xx//common/cmd_mmc.c	2012-09-05 15:06:15.698689762 +0800
@@ -50,7 +50,7 @@
 			return 1;
 		}
 
-		if (mmc_legacy_init(dev) != 0) {
+		if (mmc_init(dev) != 0) {
 			puts("No MMC card found\n");
 			return 1;
 		}
--- u-boot-2010.03//common/cmd_nand.c	2010-04-01 05:54:39.000000000 +0800
+++ u-boot-2010.03-24xx//common/cmd_nand.c	2012-09-05 15:06:15.698689762 +0800
@@ -378,6 +378,25 @@
 			else
 				ret = nand_write_skip_bad(nand, off, &size,
 							  (u_char *)addr);
+#if defined(ENABLE_CMD_NAND_YAFFS)
+		}else if ( s != NULL &&
+			(!strcmp(s, ".yaffs") || !strcmp(s, ".yaffs1"))){
+			    if(read)  {
+				  printf("nand read.yaffs[1] is not provide temporarily!"); 
+			    } else    {
+				nand->rw_oob = 1;
+#if defined(ENABLE_CMD_NAND_YAFFS_SKIPFB)
+				nand->skipfirstblk = 1;
+#else
+				nand->skipfirstblk = 0;
+#endif
+				ret = nand_write_skip_bad(nand,off,&size,(u_char *)addr);
+#if defined(ENABLE_CMD_NAND_YAFFS_SKIPFB)
+				nand->skipfirstblk = 0;
+#endif
+				nand->rw_oob = 0;
+			    }
+#endif
 		} else if (!strcmp(s, ".oob")) {
 			/* out-of-band data */
 			mtd_oob_ops_t ops = {
@@ -485,6 +504,11 @@
 	"    to/from memory address 'addr', skipping bad blocks.\n"
 	"nand erase [clean] [off size] - erase 'size' bytes from\n"
 	"    offset 'off' (entire device if not specified)\n"
+#if defined(ENABLE_CMD_NAND_YAFFS)
+	"nand read[.yaffs[1]] is not provide temporarily!\n"
+	"nand write[.yaffs[1]]    addr off size - write the `size' byte yaffs image starting\n"
+	"     at offset `off' from memory address `addr' (.yaffs1 for 512+16 NAND)\n"
+#endif
 	"nand bad - show bad blocks\n"
 	"nand dump[.oob] off - dump page\n"
 	"nand scrub - really clean NAND erasing bad blocks (UNSAFE)\n"
