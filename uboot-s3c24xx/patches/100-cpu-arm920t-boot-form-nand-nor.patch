--- u-boot-2010.03//cpu/arm920t/u-boot.lds	2010-04-01 05:54:39.000000000 +0800
+++ u-boot-2010.03-24xx//cpu/arm920t/u-boot.lds	2012-09-05 15:06:15.702689762 +0800
@@ -40,6 +40,8 @@
 	.text :
 	{
 		cpu/arm920t/start.o	(.text)
+		board/samsung/smdk2440/lowlevel_init.o	(.text)
+		board/samsung/smdk2440/nand_read.o	(.text)
 		*(.text)
 	}
 
--- u-boot-2010.03//cpu/arm920t/start.S	2010-04-01 05:54:39.000000000 +0800
+++ u-boot-2010.03-24xx//cpu/arm920t/start.S	2012-09-05 15:06:15.698689762 +0800
@@ -87,6 +87,10 @@
 .globl _bss_end
 _bss_end:
 	.word _end
+/*set bootflags*/
+.globl bBootFrmNORFlash
+bBootFrmNORFlash:
+	.word 0
 
 #ifdef CONFIG_USE_IRQ
 /* IRQ stack memory (calculated at run-time) */
@@ -114,8 +118,8 @@
 	orr	r0, r0, #0xd3
 	msr	cpsr, r0
 
-	bl	coloured_LED_init
-	bl	red_LED_on
+@	bl	coloured_LED_init
+@	bl	red_LED_on
 
 #if	defined(CONFIG_AT91RM9200DK) || defined(CONFIG_AT91RM9200EK)
 	/*
@@ -144,6 +148,12 @@
 #  define INTSUBMSK	0x4A00001C
 #  define CLKDIVN	0x4C000014	/* clock divisor register */
 # endif
+#define CLK_CTL_BASE	0x4C000000	/* tekkaman */
+#define MDIV_405	0x7f << 12	/* tekkaman */
+#define PSDIV_405	0x21		/* tekkaman */
+#define MDIV_200	0xa1 << 12	/* tekkaman */
+#define PSDIV_200	0x31		/* tekkaman */
+
 
 	ldr	r0, =pWTCON
 	mov	r1, #0x0
@@ -156,16 +166,52 @@
 	ldr	r0, =INTMSK
 	str	r1, [r0]
 # if defined(CONFIG_S3C2410)
-	ldr	r1, =0x3ff
+	ldr	r1, =0x7ff
 	ldr	r0, =INTSUBMSK
 	str	r1, [r0]
 # endif
 
+#if defined(CONFIG_S3C2440)
+	ldr	r1, =0x7fff	
+	ldr	r0, =INTSUBMSK
+	str	r1, [r0]
+#endif
+
+
+#if defined(CONFIG_S3C2440)
+	/* FCLK:HCLK:PCLK = 1:4:8 */
+	ldr	r0, =CLKDIVN
+	mov	r1, #5
+	str	r1, [r0]
+	
+	mrc	p15, 0, r1, c1, c0, 0	
+	orr	r1, r1, #0xc0000000		
+	mcr	p15, 0, r1, c1, c0, 0	
+	
+	
+	mov	r1, #CLK_CTL_BASE	
+	mov	r2, #MDIV_405	
+	add	r2, r2, #PSDIV_405	
+	str	r2, [r1, #0x04]		/* MPLLCON tekkaman */
+
+#else
 	/* FCLK:HCLK:PCLK = 1:2:4 */
 	/* default FCLK is 120 MHz ! */
 	ldr	r0, =CLKDIVN
 	mov	r1, #3
 	str	r1, [r0]
+
+	
+	mrc	p15, 0, r1, c1, c0, 0	
+	orr	r1, r1, #0xc0000000	
+	mcr	p15, 0, r1, c1, c0, 0	/*write ctrl register tekkaman*/
+	
+	
+	mov	r1, #CLK_CTL_BASE	/* tekkaman*/
+	mov	r2, #MDIV_200	
+	add	r2, r2, #PSDIV_200	
+	str	r2, [r1, #0x04]
+#endif
 #endif	/* CONFIG_S3C24X0 */
 
 	/*
@@ -176,13 +222,189 @@
 	bl	cpu_init_crit
 #endif
 
-#ifndef CONFIG_SKIP_RELOCATE_UBOOT
-relocate:				/* relocate U-Boot to RAM	    */
+/***************** CHECK_CODE_POSITION ******************************************/
 	adr	r0, _start		/* r0 <- current position of code   */
 	ldr	r1, _TEXT_BASE		/* test if we run from flash or RAM */
 	cmp	r0, r1			/* don't reloc during debug         */
 	beq	stack_setup
+/***************** CHECK_CODE_POSITION ******************************************/
+
+/***************** CHECK_BOOT_FLASH ******************************************/
+	ldr	r1, =( (4<<28)|(3<<4)|(3<<2) )		/* address of Internal SRAM  0x4000003C*/
+	mov	r0, #0		/* r0 = 0 */
+	str	r0, [r1]
+
+
+	mov	r1, #0x3c		/* address of men  0x0000003C*/
+	ldr	r0, [r1]
+	cmp	r0, #0
+	bne	relocate
+
+	/* recovery  */
+	ldr	r0, =(0xdeadbeef)
+	ldr	r1, =( (4<<28)|(3<<4)|(3<<2) )
+	str	r0, [r1]
+/***************** CHECK_BOOT_FLASH ******************************************/
+
+/***************** NAND_BOOT *************************************************/
+
+#define LENGTH_UBOOT 0x60000
+#define NAND_CTL_BASE 0x4E000000
+
+#ifdef CONFIG_S3C2440
+/* Offset */
+#define oNFCONF 0x00
+#define oNFCONT 0x04
+#define oNFCMD 0x08
+#define oNFSTAT 0x20
+
+	@ reset NAND
+	mov	r1, #NAND_CTL_BASE
+	ldr	r2, =( (7<<12)|(7<<8)|(7<<4)|(0<<0) )
+	str	r2, [r1, #oNFCONF]
+	ldr	r2, [r1, #oNFCONF]
+	
+	ldr	r2, =( (1<<4)|(0<<1)|(1<<0) )	@ Active low CE Control 
+	str	r2, [r1, #oNFCONT]
+	ldr	r2, [r1, #oNFCONT]
+	
+	ldr	r2, =(0x6)	@ RnB Clear
+	str	r2, [r1, #oNFSTAT]
+	ldr	r2, [r1, #oNFSTAT]
+	
+	mov	r2, #0xff	@ RESET command
+	strb	r2, [r1, #oNFCMD]
+	
+	mov	r3, #0	@ wait
+nand1: 
+	add	r3, r3, #0x1
+	cmp	r3, #0xa
+	blt	nand1
+
+nand2:
+	ldr	r2, [r1, #oNFSTAT]	@ wait ready
+	tst	r2, #0x4
+	beq	nand2
+	
+	
+	ldr	r2, [r1, #oNFCONT]
+	orr	r2, r2, #0x2	@ Flash Memory Chip Disable
+	str	r2, [r1, #oNFCONT]
+	
+	@ get read to call C functions (for nand_read())
+	ldr	sp, DW_STACK_START	@ setup stack pointer
+	mov	fp, #0	@ no previous frame, so fp=0
+
+	@ copy U-Boot to RAM
+	ldr	r0, =TEXT_BASE
+	mov	r1, #0x0
+	mov	r2, #LENGTH_UBOOT
+	bl	nand_read_ll
+	tst	r0, #0x0
+	beq	ok_nand_read
+
+bad_nand_read:
+loop2:
+	b	loop2	@ infinite loop
+ok_nand_read:
+	@ verify
+	mov	r0, #0
+	ldr	r1, =TEXT_BASE
+	mov	r2, #0x400	@ 4 bytes * 1024 = 4K-bytes
+go_next:
+	ldr	r3, [r0], #4
+	ldr	r4, [r1], #4
+	teq	r3, r4
+	bne	notmatch
+	subs	r2, r2, #4
+	beq	stack_setup
+	bne	go_next
+
+notmatch:
+loop3:
+	b	loop3	@ infinite loop
+#endif
+
+#ifdef	CONFIG_S3C2410
+
+/* Offset */
+#define oNFCONF 0x00
+#define oNFCMD 0x04
+#define oNFSTAT 0x10
+
+	@ reset NAND
+	mov	r1, #NAND_CTL_BASE
+	ldr	r2, =0xf830	@ initial value
+	str	r2, [r1, #oNFCONF]
+	ldr	r2, [r1, #oNFCONF]
+	bic	r2, r2, #0x800	@ enable chip
+	str	r2, [r1, #oNFCONF]
+	mov	r2, #0xff		@ RESET command
+	strb	r2, [r1, #oNFCMD]
+	
+	
+	mov	r3, #0	@ wait
+nand1:
+	add	r3, r3, #0x1
+	cmp	r3, #0xa
+	blt	nand1
+
+nand2:
+	ldr	r2, [r1, #oNFSTAT]	@ wait ready
+	tst	r2, #0x1
+	beq	nand2
+	
+	ldr	r2, [r1, #oNFCONF]
+	orr	r2, r2, #0x800	@ disable chip
+	str	r2, [r1, #oNFCONF]
+	
+	@ get read to call C functions (for nand_read())
+	ldr	sp, DW_STACK_START	@ setup stack pointer
+	mov	fp, #0	@ no previous frame, so fp=0
+	
+	@ copy U-Boot to RAM
+	ldr	r0, =TEXT_BASE
+	mov	r1, #0x0
+	mov	r2, #LENGTH_UBOOT
+	bl	nand_read_ll
+	tst	r0, #0x0
+	beq	ok_nand_read
+
+bad_nand_read:
+loop2:
+	b	loop2	@ infinite loop
+
+
+ok_nand_read:
+	@ verify
+	mov	r0, #0
+	ldr	r1, =TEXT_BASE
+	mov	r2, #0x400	@ 4 bytes * 1024 = 4K-bytes
+go_next:
+	ldr	r3, [r0], #4
+	ldr	r4, [r1], #4
+	teq	r3, r4
+	bne	notmatch
+	subs	r2, r2, #4
+	beq	stack_setup
+	bne	go_next
+
+notmatch:
+loop3:
+	b	loop3	@ infinite loop
+
+#endif
+/***************** NAND_BOOT *************************************************/
 
+/***************** NOR_BOOT *************************************************/
+relocate:				/* relocate U-Boot to RAM	    */
+      /*********** CHECK_FOR_MAGIC_NUMBER***************/
+	ldr	r1, =(0xdeadbeef)
+	cmp	r0, r1
+	bne	loop3
+      /*********** CHECK_FOR_MAGIC_NUMBER***************/
+	adr	r0, _start		/* r0 <- current position of code   */
+	ldr	r1, _TEXT_BASE		/* test if we run from flash or RAM */
 	ldr	r2, _armboot_start
 	ldr	r3, _bss_start
 	sub	r2, r3, r2		/* r2 <- size of armboot            */
@@ -193,7 +415,13 @@
 	stmia	r1!, {r3-r10}		/* copy to   target address [r1]    */
 	cmp	r0, r2			/* until source end addreee [r2]    */
 	ble	copy_loop
-#endif	/* CONFIG_SKIP_RELOCATE_UBOOT */
+
+SetBootFlag:
+	ldr r0, =bBootFrmNORFlash
+	mov r1, #1
+	str r1, [r0]
+
+/***************** NOR_BOOT *************************************************/
 
 	/* Set up the stack						    */
 stack_setup:
@@ -217,8 +445,29 @@
 
 	ldr	pc, _start_armboot
 
-_start_armboot:	.word start_armboot
+#if defined(CONFIG_SMDK2440_LED)
+#define GPIO_CTL_BASE 0x56000000
+#define oGPIO_B 0x10
+#define oGPIO_CON 0x0
+/* R/W, Configures the pins of the port */
+#define oGPIO_DAT 0x4
+#define oGPIO_UP 0x8
+/* R/W, Pull-up disable register */
+	mov	r1, #GPIO_CTL_BASE
+	add	r1, r1, #oGPIO_B
+	ldr	r2, =0x295551
+	str	r2, [r1, #oGPIO_CON]
+	mov	r2, #0xff
+	str	r2, [r1, #oGPIO_UP]
+	ldr	r2, =0x1c1
+	str	r2, [r1, #oGPIO_DAT]
+#endif
 
+_start_armboot:	.word start_armboot
+#define STACK_BASE 0x33f00000
+#define STACK_SIZE 0x10000
+	.align	2
+DW_STACK_START:	.word	STACK_BASE+STACK_SIZE-4 
 
 /*
  *************************************************************************
@@ -406,10 +655,23 @@
 
 	.align	5
 irq:
+//Apollo +
+/*
 	get_irq_stack
 	irq_save_user_regs
 	bl	do_irq
 	irq_restore_user_regs
+*/
+    /* use IRQ for USB and DMA */
+        sub    lr, lr, #4             @ the return address
+        ldr    sp, IRQ_STACK_START     @ the stack for irq
+       stmdb   sp!,  { r0-r12,lr }     @ save registers
+        
+        ldr    lr, =int_return         @ set the return addr
+        ldr    pc, =IRQ_Handle         @ call the isr
+int_return:
+        ldmia  sp!, { r0-r12,pc }^    @ return from interrupt
+//Apollo -
 
 	.align	5
 fiq:
